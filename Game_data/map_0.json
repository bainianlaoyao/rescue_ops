# start shi boyuan
class Direction:
    up = (0,-1, 0)
    down = (0,1, 0)
    left = (0,0, -1)
    right = (0,0, 1)
    none = (0,0,0)
    leftup = (0,-1,-1)
    rightup = (0,-1,1)
    leftdown = (0,1,-1)
    rightdown = (0,1,1)
    render_map = {
        up: '△',
        down: '▽',
        left: '◁',
        right: '▷',
        none: '|'
    }
    def Move_dispatch(move:str):
        match(move):
            case "w":
                return Direction.up
            case "a":
                return Direction.left
            case "s":
                return Direction.down
            case "d":
                return Direction.right
    def Move_dispatch2(move):
        match(move):
            case Direction.up:
                return Direction.rightup
            case Direction.down:
                return Direction.leftdown
            case Direction.right:
                return Direction.rightdown
            case Direction.left:
                return Direction.leftdown
#end
class ascii_art:
    @staticmethod
    def process_images(images, width, height):
        processed_images = {}
        for key, art in images.items():
            name_dic = {}
            for name in art:
                lines = art[name].split('\n')
                processed_image = []

                for line in lines:
                    if len(line) < width:
                        padding = (width - len(line)) // 2
                        line = ' ' * padding + line + ' ' * (width - len(line) - padding)  # 居中扩容
                    processed_image.append(list(line[:width]))  # 裁切并转换为字符列表

                if len(processed_image) < height:
                    padding = (height - len(processed_image)) // 2
                    empty_line = [' '] * width
                    processed_image = [empty_line] * padding + processed_image + [empty_line] * (height - len(processed_image) - padding)  # 居中扩容
                else:
                    top_padding = (len(processed_image) - height) // 2
                    processed_image = processed_image[top_padding:top_padding + height]  # 居中裁切

                name_dic[name] = processed_image[:height]  # 裁切
            processed_images[key] = name_dic
        return processed_images
    processed_images = None
# 示例使用
    images = {
    'ninja': {
        "word": r'''
,---.   .--..-./`) ,---.   .--.     .-./`)     ____            .--.   .--. .-./`)   .---.     .---.      
|    \  |  |\ .-.')|    \  |  |     \ '_ .') .'  __ `.         |  | _/  /  \ .-.')  | ,_|     | ,_|      
|  ,  \ |  |/ `-' \|  ,  \ |  |    (_ (_) _)/   '  \  \        | (`' ) /   / `-' \,-./  )   ,-./  )      
|  |\_ \|  | `-'`"`|  |\_ \|  |      / .  \ |___|  /  |        |(_ ()_)     `-'`"`\  '_ '`) \  '_ '`)    
|  _( )_\  | .---. |  _( )_\  | ___  |-'`|     _.-`   |        | (_,_)   __ .---.  > (_)  )  > (_)  )    
| (_ o _)  | |   | | (_ o _)  ||   | |   '  .'   _    |        |  |\ \  |  ||   | (  .  .-' (  .  .-'    
|  (_,_)\  | |   | |  (_,_)\  ||   `-'  /   |  _( )_  |        |  | \ `'   /|   |  `-'`-'|___`-'`-'|___  
|  |    |  | |   | |  |    |  | \      /    \ (_ o _) /        |  |  \    / |   |   |        \|        \ 
'--'    '--' '---' '--'    '--'  `-..-'      '.(_,_).'         `--'   `'-'  '---'   `--------``--------` 
                                                                                                         
'''
    ,'head':
'''⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⡤⠶⠚⠋⠉⠉⠙⠛⠲⠦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣶⣾⡿⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠳⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡴⢿⠙⣿⣻⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠹⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣷⡟⠁⢹⠿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡾⠀⠀⠘⢷⣼⢷⣄⡀⠀⠀⢤⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣇⠀⠀⠀⠈⢻⡉⢣⠙⡶⣶⢾⣿⣿⡷⠀⠀⠀⠀⠀⠀⢀⠀⢀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⡀⣸⠆⠀⠀⠙⢆⠳⣆⠹⣿⣿⣿⣥⣄⠀⠀⠀⠀⠀⢾⡀⣸⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡼⠋⠉⠀⠀⠀⠀⠘⡄⣀⡉⠻⣟⣿⡏⠙⠃⠀⠀⠀⠀⠀⠉⠻⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠰⡇⢸⣶⣤⣀⠀⠀⠀⠹⠁⢳⡀⢈⣻⡇⠀⠀⠀⠀⢀⣠⣴⣾⠀⡷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡌⣿⡟⠻⢷⣶⢄⡀⠀⠨⢿⢻⣿⠙⠀⣀⣤⣾⠿⠛⣿⡽⣸⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡾⢫⡇⢻⣿⣄⠀⠈⠙⠿⣷⣤⣼⣆⣠⣴⡿⠛⠉⠀⠀⣴⡿⠁⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⢷⡀⠀⠀⠀⠀⠀⠀⠀⢀⣾⠁⣠⣷⣄⠙⢝⠳⠶⠶⠞⢋⡠⠛⠚⠣⣉⠛⠲⠶⠖⣛⠟⢁⣴⠇⠀⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴
⢸⣷⡄⠀⠀⠀⠀⠀⠀⢸⡇⡔⢡⡏⠹⢿⣄⣉⠁⠒⠈⠁⠀⠀⠀⠀⠀⠉⠐⠒⢉⣡⣼⣯⡶⠛⠋⢉⣩⠿⠛⠒⠂⠀⠀⠀⠀⢀⣼⡏
⠀⢿⠙⢦⡀⠀⠀⠀⠀⠘⣿⡁⡿⠀⢠⠞⢷⠈⠱⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⡰⠉⢠⠟⠁⠀⡄⣄⣸⣆⠀⠀⠀⠀⠀⠀⠀⣠⠞⣸⠁
⠀⠘⣧⠀⠙⢦⡀⠀⠀⠀⠈⠻⣿⣶⣞⠛⢻⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⡿⠀⢰⣋⣉⠉⣠⡜⠀⠀⠀⠀⢀⣠⠞⠁⢠⠏⠀
⠀⠀⠘⣧⡀⠀⠙⠷⣄⡀⠀⠀⠹⣯⡏⠙⠛⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣷⡶⢾⣇⣨⠽⠋⠀⠀⠀⣀⡴⠋⠁⠀⣰⠏⠀⠀
⠀⠀⠀⠈⠳⣄⠓⢄⠈⠛⢦⣄⠀⠘⢿⣄⡀⢹⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠞⠁⣀⣀⣸⡦⠄⠀⣀⡤⠞⠉⣀⠔⢁⡼⠃⠀⠀⠀
⠀⠀⠀⠀⠀⠈⠳⣦⡁⠢⢄⠈⠙⠶⣤⣈⠙⠻⠶⣿⣦⡀⠀⠀⠀⠀⠀⣠⣾⣥⠶⠛⠉⠁⢀⣠⡴⠚⠉⢀⠔⢊⣠⠞⠋⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠙⠳⢤⣙⠢⢄⠀⠉⠓⠦⣄⣀⠀⠙⠓⠒⠒⠒⠛⠁⠀⠀⢀⣠⡤⠞⠋⠁⡀⠄⣊⣥⠶⠋⠁⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠲⢬⣁⠂⠤⣀⠉⠛⠶⢤⣀⡀⠀⣀⣤⠶⠚⠉⢁⡠⠔⣂⣥⠶⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣈⡙⠲⢦⣍⣒⣤⣤⠼⠟⠋⢉⣀⠤⢒⣊⡥⠶⠛⣉⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⣠⠤⣤⣀⣀⣀⣀⣀⣀⣀⣀⣀⣠⡏⠉⠉⡷⠖⠚⠋⣉⡠⠤⠐⢂⣩⡴⠶⢟⣉⡉⠛⠒⢶⠇⠉⢹⣧⣀⣀⣀⣀⣀⣀⣀⣀⣀⡠⠤⢄
⡇⠀⠀⠀⠀⡏⢠⡇⡇⢰⡀⡄⢀⢷⠀⡆⢹⣂⣈⣩⡤⠶⠞⠋⠉⠉⠙⠓⠶⠤⣬⣉⣐⡺⠀⠂⣸⢱⠀⠀⡃⠈⠀⠃⠈⠀⠀⠀⠀⢸
⠙⠢⠶⠴⠦⠷⠤⠷⠛⠒⠓⠛⠛⢻⣦⣵⡼⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠧⢼⣤⡟⠛⠛⠛⠳⠿⠭⠽⠤⠴⠦⠄⠀⠚'''}}
if __name__ == "__main__":
    processed_images = ascii_art.process_images(ascii_art.images, 80, 20)
    for key, image in processed_images.items():
        print(f"Processed image for {key}:")
        for name in image:
            print(f"Name: {name}")
            for line in image[name]:
                print(''.join(line))
            print("\n")# start shi boyuan
class Direction:
    up = (0,-1, 0)
    down = (0,1, 0)
    left = (0,0, -1)
    right = (0,0, 1)
    none = (0,0,0)
    leftup = (0,-1,-1)
    rightup = (0,-1,1)
    leftdown = (0,1,-1)
    rightdown = (0,1,1)
    render_map = {
        up: '△',
        down: '▽',
        left: '◁',
        right: '▷',
        none: '|'
    }
    def Move_dispatch(move:str):
        match(move):
            case "w":
                return Direction.up
            case "a":
                return Direction.left
            case "s":
                return Direction.down
            case "d":
                return Direction.right
    def Move_dispatch2(move):
        match(move):
            case Direction.up:
                return Direction.rightup
            case Direction.down:
                return Direction.leftdown
            case Direction.right:
                return Direction.rightdown
            case Direction.left:
                return Direction.leftdown
#end
class ascii_art:
    @staticmethod
    def process_images(images, width, height):
        processed_images = {}
        for key, art in images.items():
            name_dic = {}
            for name in art:
                lines = art[name].split('\n')
                processed_image = []

                for line in lines:
                    if len(line) < width:
                        padding = (width - len(line)) // 2
                        line = ' ' * padding + line + ' ' * (width - len(line) - padding)  # 居中扩容
                    processed_image.append(list(line[:width]))  # 裁切并转换为字符列表

                if len(processed_image) < height:
                    padding = (height - len(processed_image)) // 2
                    empty_line = [' '] * width
                    processed_image = [empty_line] * padding + processed_image + [empty_line] * (height - len(processed_image) - padding)  # 居中扩容
                else:
                    top_padding = (len(processed_image) - height) // 2
                    processed_image = processed_image[top_padding:top_padding + height]  # 居中裁切

                name_dic[name] = processed_image[:height]  # 裁切
            processed_images[key] = name_dic
        return processed_images
    processed_images = None
# 示例使用
    images = {
    'ninja': {
        "word": r'''
,---.   .--..-./`) ,---.   .--.     .-./`)     ____            .--.   .--. .-./`)   .---.     .---.      
|    \  |  |\ .-.')|    \  |  |     \ '_ .') .'  __ `.         |  | _/  /  \ .-.')  | ,_|     | ,_|      
|  ,  \ |  |/ `-' \|  ,  \ |  |    (_ (_) _)/   '  \  \        | (`' ) /   / `-' \,-./  )   ,-./  )      
|  |\_ \|  | `-'`"`|  |\_ \|  |      / .  \ |___|  /  |        |(_ ()_)     `-'`"`\  '_ '`) \  '_ '`)    
|  _( )_\  | .---. |  _( )_\  | ___  |-'`|     _.-`   |        | (_,_)   __ .---.  > (_)  )  > (_)  )    
| (_ o _)  | |   | | (_ o _)  ||   | |   '  .'   _    |        |  |\ \  |  ||   | (  .  .-' (  .  .-'    
|  (_,_)\  | |   | |  (_,_)\  ||   `-'  /   |  _( )_  |        |  | \ `'   /|   |  `-'`-'|___`-'`-'|___  
|  |    |  | |   | |  |    |  | \      /    \ (_ o _) /        |  |  \    / |   |   |        \|        \ 
'--'    '--' '---' '--'    '--'  `-..-'      '.(_,_).'         `--'   `'-'  '---'   `--------``--------` 
                                                                                                         
'''
    ,'head':
'''⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⡤⠶⠚⠋⠉⠉⠙⠛⠲⠦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣶⣾⡿⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠳⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡴⢿⠙⣿⣻⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠹⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣷⡟⠁⢹⠿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡾⠀⠀⠘⢷⣼⢷⣄⡀⠀⠀⢤⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣇⠀⠀⠀⠈⢻⡉⢣⠙⡶⣶⢾⣿⣿⡷⠀⠀⠀⠀⠀⠀⢀⠀⢀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⡀⣸⠆⠀⠀⠙⢆⠳⣆⠹⣿⣿⣿⣥⣄⠀⠀⠀⠀⠀⢾⡀⣸⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡼⠋⠉⠀⠀⠀⠀⠘⡄⣀⡉⠻⣟⣿⡏⠙⠃⠀⠀⠀⠀⠀⠉⠻⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠰⡇⢸⣶⣤⣀⠀⠀⠀⠹⠁⢳⡀⢈⣻⡇⠀⠀⠀⠀⢀⣠⣴⣾⠀⡷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡌⣿⡟⠻⢷⣶⢄⡀⠀⠨⢿⢻⣿⠙⠀⣀⣤⣾⠿⠛⣿⡽⣸⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡾⢫⡇⢻⣿⣄⠀⠈⠙⠿⣷⣤⣼⣆⣠⣴⡿⠛⠉⠀⠀⣴⡿⠁⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⢷⡀⠀⠀⠀⠀⠀⠀⠀⢀⣾⠁⣠⣷⣄⠙⢝⠳⠶⠶⠞⢋⡠⠛⠚⠣⣉⠛⠲⠶⠖⣛⠟⢁⣴⠇⠀⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴
⢸⣷⡄⠀⠀⠀⠀⠀⠀⢸⡇⡔⢡⡏⠹⢿⣄⣉⠁⠒⠈⠁⠀⠀⠀⠀⠀⠉⠐⠒⢉⣡⣼⣯⡶⠛⠋⢉⣩⠿⠛⠒⠂⠀⠀⠀⠀⢀⣼⡏
⠀⢿⠙⢦⡀⠀⠀⠀⠀⠘⣿⡁⡿⠀⢠⠞⢷⠈⠱⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⡰⠉⢠⠟⠁⠀⡄⣄⣸⣆⠀⠀⠀⠀⠀⠀⠀⣠⠞⣸⠁
⠀⠘⣧⠀⠙⢦⡀⠀⠀⠀⠈⠻⣿⣶⣞⠛⢻⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⡿⠀⢰⣋⣉⠉⣠⡜⠀⠀⠀⠀⢀⣠⠞⠁⢠⠏⠀
⠀⠀⠘⣧⡀⠀⠙⠷⣄⡀⠀⠀⠹⣯⡏⠙⠛⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣷⡶⢾⣇⣨⠽⠋⠀⠀⠀⣀⡴⠋⠁⠀⣰⠏⠀⠀
⠀⠀⠀⠈⠳⣄⠓⢄⠈⠛⢦⣄⠀⠘⢿⣄⡀⢹⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠞⠁⣀⣀⣸⡦⠄⠀⣀⡤⠞⠉⣀⠔⢁⡼⠃⠀⠀⠀
⠀⠀⠀⠀⠀⠈⠳⣦⡁⠢⢄⠈⠙⠶⣤⣈⠙⠻⠶⣿⣦⡀⠀⠀⠀⠀⠀⣠⣾⣥⠶⠛⠉⠁⢀⣠⡴⠚⠉⢀⠔⢊⣠⠞⠋⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠙⠳⢤⣙⠢⢄⠀⠉⠓⠦⣄⣀⠀⠙⠓⠒⠒⠒⠛⠁⠀⠀⢀⣠⡤⠞⠋⠁⡀⠄⣊⣥⠶⠋⠁⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠲⢬⣁⠂⠤⣀⠉⠛⠶⢤⣀⡀⠀⣀⣤⠶⠚⠉⢁⡠⠔⣂⣥⠶⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣈⡙⠲⢦⣍⣒⣤⣤⠼⠟⠋⢉⣀⠤⢒⣊⡥⠶⠛⣉⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⣠⠤⣤⣀⣀⣀⣀⣀⣀⣀⣀⣀⣠⡏⠉⠉⡷⠖⠚⠋⣉⡠⠤⠐⢂⣩⡴⠶⢟⣉⡉⠛⠒⢶⠇⠉⢹⣧⣀⣀⣀⣀⣀⣀⣀⣀⣀⡠⠤⢄
⡇⠀⠀⠀⠀⡏⢠⡇⡇⢰⡀⡄⢀⢷⠀⡆⢹⣂⣈⣩⡤⠶⠞⠋⠉⠉⠙⠓⠶⠤⣬⣉⣐⡺⠀⠂⣸⢱⠀⠀⡃⠈⠀⠃⠈⠀⠀⠀⠀⢸
⠙⠢⠶⠴⠦⠷⠤⠷⠛⠒⠓⠛⠛⢻⣦⣵⡼⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠧⢼⣤⡟⠛⠛⠛⠳⠿⠭⠽⠤⠴⠦⠄⠀⠚'''}}
if __name__ == "__main__":
    processed_images = ascii_art.process_images(ascii_art.images, 80, 20)
    for key, image in processed_images.items():
        print(f"Processed image for {key}:")
        for name in image:
            print(f"Name: {name}")
            for line in image[name]:
                print(''.join(line))
            print("\n")# start shi boyuan
class Direction:
    up = (0,-1, 0)
    down = (0,1, 0)
    left = (0,0, -1)
    right = (0,0, 1)
    none = (0,0,0)
    leftup = (0,-1,-1)
    rightup = (0,-1,1)
    leftdown = (0,1,-1)
    rightdown = (0,1,1)
    render_map = {
        up: '△',
        down: '▽',
        left: '◁',
        right: '▷',
        none: '|'
    }
    def Move_dispatch(move:str):
        match(move):
            case "w":
                return Direction.up
            case "a":
                return Direction.left
            case "s":
                return Direction.down
            case "d":
                return Direction.right
    def Move_dispatch2(move):
        match(move):
            case Direction.up:
                return Direction.rightup
            case Direction.down:
                return Direction.leftdown
            case Direction.right:
                return Direction.rightdown
            case Direction.left:
                return Direction.leftdown
#end
class ascii_art:
    @staticmethod
    def process_images(images, width, height):
        processed_images = {}
        for key, art in images.items():
            name_dic = {}
            for name in art:
                lines = art[name].split('\n')
                processed_image = []

                for line in lines:
                    if len(line) < width:
                        padding = (width - len(line)) // 2
                        line = ' ' * padding + line + ' ' * (width - len(line) - padding)  # 居中扩容
                    processed_image.append(list(line[:width]))  # 裁切并转换为字符列表

                if len(processed_image) < height:
                    padding = (height - len(processed_image)) // 2
                    empty_line = [' '] * width
                    processed_image = [empty_line] * padding + processed_image + [empty_line] * (height - len(processed_image) - padding)  # 居中扩容
                else:
                    top_padding = (len(processed_image) - height) // 2
                    processed_image = processed_image[top_padding:top_padding + height]  # 居中裁切

                name_dic[name] = processed_image[:height]  # 裁切
            processed_images[key] = name_dic
        return processed_images
    processed_images = None
# 示例使用
    images = {
    'ninja': {
        "word": r'''
,---.   .--..-./`) ,---.   .--.     .-./`)     ____            .--.   .--. .-./`)   .---.     .---.      
|    \  |  |\ .-.')|    \  |  |     \ '_ .') .'  __ `.         |  | _/  /  \ .-.')  | ,_|     | ,_|      
|  ,  \ |  |/ `-' \|  ,  \ |  |    (_ (_) _)/   '  \  \        | (`' ) /   / `-' \,-./  )   ,-./  )      
|  |\_ \|  | `-'`"`|  |\_ \|  |      / .  \ |___|  /  |        |(_ ()_)     `-'`"`\  '_ '`) \  '_ '`)    
|  _( )_\  | .---. |  _( )_\  | ___  |-'`|     _.-`   |        | (_,_)   __ .---.  > (_)  )  > (_)  )    
| (_ o _)  | |   | | (_ o _)  ||   | |   '  .'   _    |        |  |\ \  |  ||   | (  .  .-' (  .  .-'    
|  (_,_)\  | |   | |  (_,_)\  ||   `-'  /   |  _( )_  |        |  | \ `'   /|   |  `-'`-'|___`-'`-'|___  
|  |    |  | |   | |  |    |  | \      /    \ (_ o _) /        |  |  \    / |   |   |        \|        \ 
'--'    '--' '---' '--'    '--'  `-..-'      '.(_,_).'         `--'   `'-'  '---'   `--------``--------` 
                                                                                                         
'''
    ,'head':
'''⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⡤⠶⠚⠋⠉⠉⠙⠛⠲⠦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣶⣾⡿⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠳⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡴⢿⠙⣿⣻⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠹⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣷⡟⠁⢹⠿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡾⠀⠀⠘⢷⣼⢷⣄⡀⠀⠀⢤⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣇⠀⠀⠀⠈⢻⡉⢣⠙⡶⣶⢾⣿⣿⡷⠀⠀⠀⠀⠀⠀⢀⠀⢀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⡀⣸⠆⠀⠀⠙⢆⠳⣆⠹⣿⣿⣿⣥⣄⠀⠀⠀⠀⠀⢾⡀⣸⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡼⠋⠉⠀⠀⠀⠀⠘⡄⣀⡉⠻⣟⣿⡏⠙⠃⠀⠀⠀⠀⠀⠉⠻⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠰⡇⢸⣶⣤⣀⠀⠀⠀⠹⠁⢳⡀⢈⣻⡇⠀⠀⠀⠀⢀⣠⣴⣾⠀⡷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡌⣿⡟⠻⢷⣶⢄⡀⠀⠨⢿⢻⣿⠙⠀⣀⣤⣾⠿⠛⣿⡽⣸⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡾⢫⡇⢻⣿⣄⠀⠈⠙⠿⣷⣤⣼⣆⣠⣴⡿⠛⠉⠀⠀⣴⡿⠁⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⢷⡀⠀⠀⠀⠀⠀⠀⠀⢀⣾⠁⣠⣷⣄⠙⢝⠳⠶⠶⠞⢋⡠⠛⠚⠣⣉⠛⠲⠶⠖⣛⠟⢁⣴⠇⠀⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴
⢸⣷⡄⠀⠀⠀⠀⠀⠀⢸⡇⡔⢡⡏⠹⢿⣄⣉⠁⠒⠈⠁⠀⠀⠀⠀⠀⠉⠐⠒⢉⣡⣼⣯⡶⠛⠋⢉⣩⠿⠛⠒⠂⠀⠀⠀⠀⢀⣼⡏
⠀⢿⠙⢦⡀⠀⠀⠀⠀⠘⣿⡁⡿⠀⢠⠞⢷⠈⠱⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⡰⠉⢠⠟⠁⠀⡄⣄⣸⣆⠀⠀⠀⠀⠀⠀⠀⣠⠞⣸⠁
⠀⠘⣧⠀⠙⢦⡀⠀⠀⠀⠈⠻⣿⣶⣞⠛⢻⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⡿⠀⢰⣋⣉⠉⣠⡜⠀⠀⠀⠀⢀⣠⠞⠁⢠⠏⠀
⠀⠀⠘⣧⡀⠀⠙⠷⣄⡀⠀⠀⠹⣯⡏⠙⠛⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣷⡶⢾⣇⣨⠽⠋⠀⠀⠀⣀⡴⠋⠁⠀⣰⠏⠀⠀
⠀⠀⠀⠈⠳⣄⠓⢄⠈⠛⢦⣄⠀⠘⢿⣄⡀⢹⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠞⠁⣀⣀⣸⡦⠄⠀⣀⡤⠞⠉⣀⠔⢁⡼⠃⠀⠀⠀
⠀⠀⠀⠀⠀⠈⠳⣦⡁⠢⢄⠈⠙⠶⣤⣈⠙⠻⠶⣿⣦⡀⠀⠀⠀⠀⠀⣠⣾⣥⠶⠛⠉⠁⢀⣠⡴⠚⠉⢀⠔⢊⣠⠞⠋⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠙⠳⢤⣙⠢⢄⠀⠉⠓⠦⣄⣀⠀⠙⠓⠒⠒⠒⠛⠁⠀⠀⢀⣠⡤⠞⠋⠁⡀⠄⣊⣥⠶⠋⠁⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠲⢬⣁⠂⠤⣀⠉⠛⠶⢤⣀⡀⠀⣀⣤⠶⠚⠉⢁⡠⠔⣂⣥⠶⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣈⡙⠲⢦⣍⣒⣤⣤⠼⠟⠋⢉⣀⠤⢒⣊⡥⠶⠛⣉⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⣠⠤⣤⣀⣀⣀⣀⣀⣀⣀⣀⣀⣠⡏⠉⠉⡷⠖⠚⠋⣉⡠⠤⠐⢂⣩⡴⠶⢟⣉⡉⠛⠒⢶⠇⠉⢹⣧⣀⣀⣀⣀⣀⣀⣀⣀⣀⡠⠤⢄
⡇⠀⠀⠀⠀⡏⢠⡇⡇⢰⡀⡄⢀⢷⠀⡆⢹⣂⣈⣩⡤⠶⠞⠋⠉⠉⠙⠓⠶⠤⣬⣉⣐⡺⠀⠂⣸⢱⠀⠀⡃⠈⠀⠃⠈⠀⠀⠀⠀⢸
⠙⠢⠶⠴⠦⠷⠤⠷⠛⠒⠓⠛⠛⢻⣦⣵⡼⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠧⢼⣤⡟⠛⠛⠛⠳⠿⠭⠽⠤⠴⠦⠄⠀⠚'''}}
if __name__ == "__main__":
    processed_images = ascii_art.process_images(ascii_art.images, 80, 20)
    for key, image in processed_images.items():
        print(f"Processed image for {key}:")
        for name in image:
            print(f"Name: {name}")
            for line in image[name]:
                print(''.join(line))
            print("\n")# start shi boyuan
class Direction:
    up = (0,-1, 0)
    down = (0,1, 0)
    left = (0,0, -1)
    right = (0,0, 1)
    none = (0,0,0)
    leftup = (0,-1,-1)
    rightup = (0,-1,1)
    leftdown = (0,1,-1)
    rightdown = (0,1,1)
    render_map = {
        up: '△',
        down: '▽',
        left: '◁',
        right: '▷',
        none: '|'
    }
    def Move_dispatch(move:str):
        match(move):
            case "w":
                return Direction.up
            case "a":
                return Direction.left
            case "s":
                return Direction.down
            case "d":
                return Direction.right
    def Move_dispatch2(move):
        match(move):
            case Direction.up:
                return Direction.rightup
            case Direction.down:
                return Direction.leftdown
            case Direction.right:
                return Direction.rightdown
            case Direction.left:
                return Direction.leftdown
#end
class ascii_art:
    @staticmethod
    def process_images(images, width, height):
        processed_images = {}
        for key, art in images.items():
            name_dic = {}
            for name in art:
                lines = art[name].split('\n')
                processed_image = []

                for line in lines:
                    if len(line) < width:
                        padding = (width - len(line)) // 2
                        line = ' ' * padding + line + ' ' * (width - len(line) - padding)  # 居中扩容
                    processed_image.append(list(line[:width]))  # 裁切并转换为字符列表

                if len(processed_image) < height:
                    padding = (height - len(processed_image)) // 2
                    empty_line = [' '] * width
                    processed_image = [empty_line] * padding + processed_image + [empty_line] * (height - len(processed_image) - padding)  # 居中扩容
                else:
                    top_padding = (len(processed_image) - height) // 2
                    processed_image = processed_image[top_padding:top_padding + height]  # 居中裁切

                name_dic[name] = processed_image[:height]  # 裁切
            processed_images[key] = name_dic
        return processed_images
    processed_images = None
# 示例使用
    images = {
    'ninja': {
        "word": r'''
,---.   .--..-./`) ,---.   .--.     .-./`)     ____            .--.   .--. .-./`)   .---.     .---.      
|    \  |  |\ .-.')|    \  |  |     \ '_ .') .'  __ `.         |  | _/  /  \ .-.')  | ,_|     | ,_|      
|  ,  \ |  |/ `-' \|  ,  \ |  |    (_ (_) _)/   '  \  \        | (`' ) /   / `-' \,-./  )   ,-./  )      
|  |\_ \|  | `-'`"`|  |\_ \|  |      / .  \ |___|  /  |        |(_ ()_)     `-'`"`\  '_ '`) \  '_ '`)    
|  _( )_\  | .---. |  _( )_\  | ___  |-'`|     _.-`   |        | (_,_)   __ .---.  > (_)  )  > (_)  )    
| (_ o _)  | |   | | (_ o _)  ||   | |   '  .'   _    |        |  |\ \  |  ||   | (  .  .-' (  .  .-'    
|  (_,_)\  | |   | |  (_,_)\  ||   `-'  /   |  _( )_  |        |  | \ `'   /|   |  `-'`-'|___`-'`-'|___  
|  |    |  | |   | |  |    |  | \      /    \ (_ o _) /        |  |  \    / |   |   |        \|        \ 
'--'    '--' '---' '--'    '--'  `-..-'      '.(_,_).'         `--'   `'-'  '---'   `--------``--------` 
                                                                                                         
'''
    ,'head':
'''⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⡤⠶⠚⠋⠉⠉⠙⠛⠲⠦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣶⣾⡿⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠳⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡴⢿⠙⣿⣻⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠹⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣷⡟⠁⢹⠿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡾⠀⠀⠘⢷⣼⢷⣄⡀⠀⠀⢤⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣇⠀⠀⠀⠈⢻⡉⢣⠙⡶⣶⢾⣿⣿⡷⠀⠀⠀⠀⠀⠀⢀⠀⢀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⡀⣸⠆⠀⠀⠙⢆⠳⣆⠹⣿⣿⣿⣥⣄⠀⠀⠀⠀⠀⢾⡀⣸⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡼⠋⠉⠀⠀⠀⠀⠘⡄⣀⡉⠻⣟⣿⡏⠙⠃⠀⠀⠀⠀⠀⠉⠻⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠰⡇⢸⣶⣤⣀⠀⠀⠀⠹⠁⢳⡀⢈⣻⡇⠀⠀⠀⠀⢀⣠⣴⣾⠀⡷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡌⣿⡟⠻⢷⣶⢄⡀⠀⠨⢿⢻⣿⠙⠀⣀⣤⣾⠿⠛⣿⡽⣸⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡾⢫⡇⢻⣿⣄⠀⠈⠙⠿⣷⣤⣼⣆⣠⣴⡿⠛⠉⠀⠀⣴⡿⠁⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⢷⡀⠀⠀⠀⠀⠀⠀⠀⢀⣾⠁⣠⣷⣄⠙⢝⠳⠶⠶⠞⢋⡠⠛⠚⠣⣉⠛⠲⠶⠖⣛⠟⢁⣴⠇⠀⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴
⢸⣷⡄⠀⠀⠀⠀⠀⠀⢸⡇⡔⢡⡏⠹⢿⣄⣉⠁⠒⠈⠁⠀⠀⠀⠀⠀⠉⠐⠒⢉⣡⣼⣯⡶⠛⠋⢉⣩⠿⠛⠒⠂⠀⠀⠀⠀⢀⣼⡏
⠀⢿⠙⢦⡀⠀⠀⠀⠀⠘⣿⡁⡿⠀⢠⠞⢷⠈⠱⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⡰⠉⢠⠟⠁⠀⡄⣄⣸⣆⠀⠀⠀⠀⠀⠀⠀⣠⠞⣸⠁
⠀⠘⣧⠀⠙⢦⡀⠀⠀⠀⠈⠻⣿⣶⣞⠛⢻⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⡿⠀⢰⣋⣉⠉⣠⡜⠀⠀⠀⠀⢀⣠⠞⠁⢠⠏⠀
⠀⠀⠘⣧⡀⠀⠙⠷⣄⡀⠀⠀⠹⣯⡏⠙⠛⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣷⡶⢾⣇⣨⠽⠋⠀⠀⠀⣀⡴⠋⠁⠀⣰⠏⠀⠀
⠀⠀⠀⠈⠳⣄⠓⢄⠈⠛⢦⣄⠀⠘⢿⣄⡀⢹⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠞⠁⣀⣀⣸⡦⠄⠀⣀⡤⠞⠉⣀⠔⢁⡼⠃⠀⠀⠀
⠀⠀⠀⠀⠀⠈⠳⣦⡁⠢⢄⠈⠙⠶⣤⣈⠙⠻⠶⣿⣦⡀⠀⠀⠀⠀⠀⣠⣾⣥⠶⠛⠉⠁⢀⣠⡴⠚⠉⢀⠔⢊⣠⠞⠋⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠙⠳⢤⣙⠢⢄⠀⠉⠓⠦⣄⣀⠀⠙⠓⠒⠒⠒⠛⠁⠀⠀⢀⣠⡤⠞⠋⠁⡀⠄⣊⣥⠶⠋⠁⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠲⢬⣁⠂⠤⣀⠉⠛⠶⢤⣀⡀⠀⣀⣤⠶⠚⠉⢁⡠⠔⣂⣥⠶⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣈⡙⠲⢦⣍⣒⣤⣤⠼⠟⠋⢉⣀⠤⢒⣊⡥⠶⠛⣉⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⣠⠤⣤⣀⣀⣀⣀⣀⣀⣀⣀⣀⣠⡏⠉⠉⡷⠖⠚⠋⣉⡠⠤⠐⢂⣩⡴⠶⢟⣉⡉⠛⠒⢶⠇⠉⢹⣧⣀⣀⣀⣀⣀⣀⣀⣀⣀⡠⠤⢄
⡇⠀⠀⠀⠀⡏⢠⡇⡇⢰⡀⡄⢀⢷⠀⡆⢹⣂⣈⣩⡤⠶⠞⠋⠉⠉⠙⠓⠶⠤⣬⣉⣐⡺⠀⠂⣸⢱⠀⠀⡃⠈⠀⠃⠈⠀⠀⠀⠀⢸
⠙⠢⠶⠴⠦⠷⠤⠷⠛⠒⠓⠛⠛⢻⣦⣵⡼⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠧⢼⣤⡟⠛⠛⠛⠳⠿⠭⠽⠤⠴⠦⠄⠀⠚'''}}
if __name__ == "__main__":
    processed_images = ascii_art.process_images(ascii_art.images, 80, 20)
    for key, image in processed_images.items():
        print(f"Processed image for {key}:")
        for name in image:
            print(f"Name: {name}")
            for line in image[name]:
                print(''.join(line))
            print("\n")# start shi boyuan
class Direction:
    up = (0,-1, 0)
    down = (0,1, 0)
    left = (0,0, -1)
    right = (0,0, 1)
    none = (0,0,0)
    leftup = (0,-1,-1)
    rightup = (0,-1,1)
    leftdown = (0,1,-1)
    rightdown = (0,1,1)
    render_map = {
        up: '△',
        down: '▽',
        left: '◁',
        right: '▷',
        none: '|'
    }
    def Move_dispatch(move:str):
        match(move):
            case "w":
                return Direction.up
            case "a":
                return Direction.left
            case "s":
                return Direction.down
            case "d":
                return Direction.right
    def Move_dispatch2(move):
        match(move):
            case Direction.up:
                return Direction.rightup
            case Direction.down:
                return Direction.leftdown
            case Direction.right:
                return Direction.rightdown
            case Direction.left:
                return Direction.leftdown
#end
class ascii_art:
    @staticmethod
    def process_images(images, width, height):
        processed_images = {}
        for key, art in images.items():
            name_dic = {}
            for name in art:
                lines = art[name].split('\n')
                processed_image = []

                for line in lines:
                    if len(line) < width:
                        padding = (width - len(line)) // 2
                        line = ' ' * padding + line + ' ' * (width - len(line) - padding)  # 居中扩容
                    processed_image.append(list(line[:width]))  # 裁切并转换为字符列表

                if len(processed_image) < height:
                    padding = (height - len(processed_image)) // 2
                    empty_line = [' '] * width
                    processed_image = [empty_line] * padding + processed_image + [empty_line] * (height - len(processed_image) - padding)  # 居中扩容
                else:
                    top_padding = (len(processed_image) - height) // 2
                    processed_image = processed_image[top_padding:top_padding + height]  # 居中裁切

                name_dic[name] = processed_image[:height]  # 裁切
            processed_images[key] = name_dic
        return processed_images
    processed_images = None
# 示例使用
    images = {
    'ninja': {
        "word": r'''
,---.   .--..-./`) ,---.   .--.     .-./`)     ____            .--.   .--. .-./`)   .---.     .---.      
|    \  |  |\ .-.')|    \  |  |     \ '_ .') .'  __ `.         |  | _/  /  \ .-.')  | ,_|     | ,_|      
|  ,  \ |  |/ `-' \|  ,  \ |  |    (_ (_) _)/   '  \  \        | (`' ) /   / `-' \,-./  )   ,-./  )      
|  |\_ \|  | `-'`"`|  |\_ \|  |      / .  \ |___|  /  |        |(_ ()_)     `-'`"`\  '_ '`) \  '_ '`)    
|  _( )_\  | .---. |  _( )_\  | ___  |-'`|     _.-`   |        | (_,_)   __ .---.  > (_)  )  > (_)  )    
| (_ o _)  | |   | | (_ o _)  ||   | |   '  .'   _    |        |  |\ \  |  ||   | (  .  .-' (  .  .-'    
|  (_,_)\  | |   | |  (_,_)\  ||   `-'  /   |  _( )_  |        |  | \ `'   /|   |  `-'`-'|___`-'`-'|___  
|  |    |  | |   | |  |    |  | \      /    \ (_ o _) /        |  |  \    / |   |   |        \|        \ 
'--'    '--' '---' '--'    '--'  `-..-'      '.(_,_).'         `--'   `'-'  '---'   `--------``--------` 
                                                                                                         
'''
    ,'head':
'''⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⡤⠶⠚⠋⠉⠉⠙⠛⠲⠦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣶⣾⡿⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠳⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡴⢿⠙⣿⣻⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠹⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣷⡟⠁⢹⠿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡾⠀⠀⠘⢷⣼⢷⣄⡀⠀⠀⢤⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣇⠀⠀⠀⠈⢻⡉⢣⠙⡶⣶⢾⣿⣿⡷⠀⠀⠀⠀⠀⠀⢀⠀⢀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⡀⣸⠆⠀⠀⠙⢆⠳⣆⠹⣿⣿⣿⣥⣄⠀⠀⠀⠀⠀⢾⡀⣸⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡼⠋⠉⠀⠀⠀⠀⠘⡄⣀⡉⠻⣟⣿⡏⠙⠃⠀⠀⠀⠀⠀⠉⠻⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠰⡇⢸⣶⣤⣀⠀⠀⠀⠹⠁⢳⡀⢈⣻⡇⠀⠀⠀⠀⢀⣠⣴⣾⠀⡷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡌⣿⡟⠻⢷⣶⢄⡀⠀⠨⢿⢻⣿⠙⠀⣀⣤⣾⠿⠛⣿⡽⣸⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡾⢫⡇⢻⣿⣄⠀⠈⠙⠿⣷⣤⣼⣆⣠⣴⡿⠛⠉⠀⠀⣴⡿⠁⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⢷⡀⠀⠀⠀⠀⠀⠀⠀⢀⣾⠁⣠⣷⣄⠙⢝⠳⠶⠶⠞⢋⡠⠛⠚⠣⣉⠛⠲⠶⠖⣛⠟⢁⣴⠇⠀⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴
⢸⣷⡄⠀⠀⠀⠀⠀⠀⢸⡇⡔⢡⡏⠹⢿⣄⣉⠁⠒⠈⠁⠀⠀⠀⠀⠀⠉⠐⠒⢉⣡⣼⣯⡶⠛⠋⢉⣩⠿⠛⠒⠂⠀⠀⠀⠀⢀⣼⡏
⠀⢿⠙⢦⡀⠀⠀⠀⠀⠘⣿⡁⡿⠀⢠⠞⢷⠈⠱⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⡰⠉⢠⠟⠁⠀⡄⣄⣸⣆⠀⠀⠀⠀⠀⠀⠀⣠⠞⣸⠁
⠀⠘⣧⠀⠙⢦⡀⠀⠀⠀⠈⠻⣿⣶⣞⠛⢻⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⡿⠀⢰⣋⣉⠉⣠⡜⠀⠀⠀⠀⢀⣠⠞⠁⢠⠏⠀
⠀⠀⠘⣧⡀⠀⠙⠷⣄⡀⠀⠀⠹⣯⡏⠙⠛⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣷⡶⢾⣇⣨⠽⠋⠀⠀⠀⣀⡴⠋⠁⠀⣰⠏⠀⠀
⠀⠀⠀⠈⠳⣄⠓⢄⠈⠛⢦⣄⠀⠘⢿⣄⡀⢹⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠞⠁⣀⣀⣸⡦⠄⠀⣀⡤⠞⠉⣀⠔⢁⡼⠃⠀⠀⠀
⠀⠀⠀⠀⠀⠈⠳⣦⡁⠢⢄⠈⠙⠶⣤⣈⠙⠻⠶⣿⣦⡀⠀⠀⠀⠀⠀⣠⣾⣥⠶⠛⠉⠁⢀⣠⡴⠚⠉⢀⠔⢊⣠⠞⠋⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠙⠳⢤⣙⠢⢄⠀⠉⠓⠦⣄⣀⠀⠙⠓⠒⠒⠒⠛⠁⠀⠀⢀⣠⡤⠞⠋⠁⡀⠄⣊⣥⠶⠋⠁⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠲⢬⣁⠂⠤⣀⠉⠛⠶⢤⣀⡀⠀⣀⣤⠶⠚⠉⢁⡠⠔⣂⣥⠶⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣈⡙⠲⢦⣍⣒⣤⣤⠼⠟⠋⢉⣀⠤⢒⣊⡥⠶⠛⣉⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⣠⠤⣤⣀⣀⣀⣀⣀⣀⣀⣀⣀⣠⡏⠉⠉⡷⠖⠚⠋⣉⡠⠤⠐⢂⣩⡴⠶⢟⣉⡉⠛⠒⢶⠇⠉⢹⣧⣀⣀⣀⣀⣀⣀⣀⣀⣀⡠⠤⢄
⡇⠀⠀⠀⠀⡏⢠⡇⡇⢰⡀⡄⢀⢷⠀⡆⢹⣂⣈⣩⡤⠶⠞⠋⠉⠉⠙⠓⠶⠤⣬⣉⣐⡺⠀⠂⣸⢱⠀⠀⡃⠈⠀⠃⠈⠀⠀⠀⠀⢸
⠙⠢⠶⠴⠦⠷⠤⠷⠛⠒⠓⠛⠛⢻⣦⣵⡼⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠧⢼⣤⡟⠛⠛⠛⠳⠿⠭⠽⠤⠴⠦⠄⠀⠚'''}}
if __name__ == "__main__":
    processed_images = ascii_art.process_images(ascii_art.images, 80, 20)
    for key, image in processed_images.items():
        print(f"Processed image for {key}:")
        for name in image:
            print(f"Name: {name}")
            for line in image[name]:
                print(''.join(line))
            print("\n")# start shi boyuan
class Direction:
    up = (0,-1, 0)
    down = (0,1, 0)
    left = (0,0, -1)
    right = (0,0, 1)
    none = (0,0,0)
    leftup = (0,-1,-1)
    rightup = (0,-1,1)
    leftdown = (0,1,-1)
    rightdown = (0,1,1)
    render_map = {
        up: '△',
        down: '▽',
        left: '◁',
        right: '▷',
        none: '|'
    }
    def Move_dispatch(move:str):
        match(move):
            case "w":
                return Direction.up
            case "a":
                return Direction.left
            case "s":
                return Direction.down
            case "d":
                return Direction.right
    def Move_dispatch2(move):
        match(move):
            case Direction.up:
                return Direction.rightup
            case Direction.down:
                return Direction.leftdown
            case Direction.right:
                return Direction.rightdown
            case Direction.left:
                return Direction.leftdown
#end
class ascii_art:
    @staticmethod
    def process_images(images, width, height):
        processed_images = {}
        for key, art in images.items():
            name_dic = {}
            for name in art:
                lines = art[name].split('\n')
                processed_image = []

                for line in lines:
                    if len(line) < width:
                        padding = (width - len(line)) // 2
                        line = ' ' * padding + line + ' ' * (width - len(line) - padding)  # 居中扩容
                    processed_image.append(list(line[:width]))  # 裁切并转换为字符列表

                if len(processed_image) < height:
                    padding = (height - len(processed_image)) // 2
                    empty_line = [' '] * width
                    processed_image = [empty_line] * padding + processed_image + [empty_line] * (height - len(processed_image) - padding)  # 居中扩容
                else:
                    top_padding = (len(processed_image) - height) // 2
                    processed_image = processed_image[top_padding:top_padding + height]  # 居中裁切

                name_dic[name] = processed_image[:height]  # 裁切
            processed_images[key] = name_dic
        return processed_images
    processed_images = None
# 示例使用
    images = {
    'ninja': {
        "word": r'''
,---.   .--..-./`) ,---.   .--.     .-./`)     ____            .--.   .--. .-./`)   .---.     .---.      
|    \  |  |\ .-.')|    \  |  |     \ '_ .') .'  __ `.         |  | _/  /  \ .-.')  | ,_|     | ,_|      
|  ,  \ |  |/ `-' \|  ,  \ |  |    (_ (_) _)/   '  \  \        | (`' ) /   / `-' \,-./  )   ,-./  )      
|  |\_ \|  | `-'`"`|  |\_ \|  |      / .  \ |___|  /  |        |(_ ()_)     `-'`"`\  '_ '`) \  '_ '`)    
|  _( )_\  | .---. |  _( )_\  | ___  |-'`|     _.-`   |        | (_,_)   __ .---.  > (_)  )  > (_)  )    
| (_ o _)  | |   | | (_ o _)  ||   | |   '  .'   _    |        |  |\ \  |  ||   | (  .  .-' (  .  .-'    
|  (_,_)\  | |   | |  (_,_)\  ||   `-'  /   |  _( )_  |        |  | \ `'   /|   |  `-'`-'|___`-'`-'|___  
|  |    |  | |   | |  |    |  | \      /    \ (_ o _) /        |  |  \    / |   |   |        \|        \ 
'--'    '--' '---' '--'    '--'  `-..-'      '.(_,_).'         `--'   `'-'  '---'   `--------``--------` 
                                                                                                         
'''
    ,'head':
'''⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⡤⠶⠚⠋⠉⠉⠙⠛⠲⠦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣶⣾⡿⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠳⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡴⢿⠙⣿⣻⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠹⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣷⡟⠁⢹⠿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡾⠀⠀⠘⢷⣼⢷⣄⡀⠀⠀⢤⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣇⠀⠀⠀⠈⢻⡉⢣⠙⡶⣶⢾⣿⣿⡷⠀⠀⠀⠀⠀⠀⢀⠀⢀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⡀⣸⠆⠀⠀⠙⢆⠳⣆⠹⣿⣿⣿⣥⣄⠀⠀⠀⠀⠀⢾⡀⣸⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡼⠋⠉⠀⠀⠀⠀⠘⡄⣀⡉⠻⣟⣿⡏⠙⠃⠀⠀⠀⠀⠀⠉⠻⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠰⡇⢸⣶⣤⣀⠀⠀⠀⠹⠁⢳⡀⢈⣻⡇⠀⠀⠀⠀⢀⣠⣴⣾⠀⡷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡌⣿⡟⠻⢷⣶⢄⡀⠀⠨⢿⢻⣿⠙⠀⣀⣤⣾⠿⠛⣿⡽⣸⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡾⢫⡇⢻⣿⣄⠀⠈⠙⠿⣷⣤⣼⣆⣠⣴⡿⠛⠉⠀⠀⣴⡿⠁⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⢷⡀⠀⠀⠀⠀⠀⠀⠀⢀⣾⠁⣠⣷⣄⠙⢝⠳⠶⠶⠞⢋⡠⠛⠚⠣⣉⠛⠲⠶⠖⣛⠟⢁⣴⠇⠀⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴
⢸⣷⡄⠀⠀⠀⠀⠀⠀⢸⡇⡔⢡⡏⠹⢿⣄⣉⠁⠒⠈⠁⠀⠀⠀⠀⠀⠉⠐⠒⢉⣡⣼⣯⡶⠛⠋⢉⣩⠿⠛⠒⠂⠀⠀⠀⠀⢀⣼⡏
⠀⢿⠙⢦⡀⠀⠀⠀⠀⠘⣿⡁⡿⠀⢠⠞⢷⠈⠱⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⡰⠉⢠⠟⠁⠀⡄⣄⣸⣆⠀⠀⠀⠀⠀⠀⠀⣠⠞⣸⠁
⠀⠘⣧⠀⠙⢦⡀⠀⠀⠀⠈⠻⣿⣶⣞⠛⢻⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⡿⠀⢰⣋⣉⠉⣠⡜⠀⠀⠀⠀⢀⣠⠞⠁⢠⠏⠀
⠀⠀⠘⣧⡀⠀⠙⠷⣄⡀⠀⠀⠹⣯⡏⠙⠛⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣷⡶⢾⣇⣨⠽⠋⠀⠀⠀⣀⡴⠋⠁⠀⣰⠏⠀⠀
⠀⠀⠀⠈⠳⣄⠓⢄⠈⠛⢦⣄⠀⠘⢿⣄⡀⢹⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠞⠁⣀⣀⣸⡦⠄⠀⣀⡤⠞⠉⣀⠔⢁⡼⠃⠀⠀⠀
⠀⠀⠀⠀⠀⠈⠳⣦⡁⠢⢄⠈⠙⠶⣤⣈⠙⠻⠶⣿⣦⡀⠀⠀⠀⠀⠀⣠⣾⣥⠶⠛⠉⠁⢀⣠⡴⠚⠉⢀⠔⢊⣠⠞⠋⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠙⠳⢤⣙⠢⢄⠀⠉⠓⠦⣄⣀⠀⠙⠓⠒⠒⠒⠛⠁⠀⠀⢀⣠⡤⠞⠋⠁⡀⠄⣊⣥⠶⠋⠁⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠲⢬⣁⠂⠤⣀⠉⠛⠶⢤⣀⡀⠀⣀⣤⠶⠚⠉⢁⡠⠔⣂⣥⠶⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣈⡙⠲⢦⣍⣒⣤⣤⠼⠟⠋⢉⣀⠤⢒⣊⡥⠶⠛⣉⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⣠⠤⣤⣀⣀⣀⣀⣀⣀⣀⣀⣀⣠⡏⠉⠉⡷⠖⠚⠋⣉⡠⠤⠐⢂⣩⡴⠶⢟⣉⡉⠛⠒⢶⠇⠉⢹⣧⣀⣀⣀⣀⣀⣀⣀⣀⣀⡠⠤⢄
⡇⠀⠀⠀⠀⡏⢠⡇⡇⢰⡀⡄⢀⢷⠀⡆⢹⣂⣈⣩⡤⠶⠞⠋⠉⠉⠙⠓⠶⠤⣬⣉⣐⡺⠀⠂⣸⢱⠀⠀⡃⠈⠀⠃⠈⠀⠀⠀⠀⢸
⠙⠢⠶⠴⠦⠷⠤⠷⠛⠒⠓⠛⠛⢻⣦⣵⡼⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠧⢼⣤⡟⠛⠛⠛⠳⠿⠭⠽⠤⠴⠦⠄⠀⠚'''}}
if __name__ == "__main__":
    processed_images = ascii_art.process_images(ascii_art.images, 80, 20)
    for key, image in processed_images.items():
        print(f"Processed image for {key}:")
        for name in image:
            print(f"Name: {name}")
            for line in image[name]:
                print(''.join(line))
            print("\n")# start shi boyuan
class Direction:
    up = (0,-1, 0)
    down = (0,1, 0)
    left = (0,0, -1)
    right = (0,0, 1)
    none = (0,0,0)
    leftup = (0,-1,-1)
    rightup = (0,-1,1)
    leftdown = (0,1,-1)
    rightdown = (0,1,1)
    render_map = {
        up: '△',
        down: '▽',
        left: '◁',
        right: '▷',
        none: '|'
    }
    def Move_dispatch(move:str):
        match(move):
            case "w":
                return Direction.up
            case "a":
                return Direction.left
            case "s":
                return Direction.down
            case "d":
                return Direction.right
    def Move_dispatch2(move):
        match(move):
            case Direction.up:
                return Direction.rightup
            case Direction.down:
                return Direction.leftdown
            case Direction.right:
                return Direction.rightdown
            case Direction.left:
                return Direction.leftdown
#end
class ascii_art:
    @staticmethod
    def process_images(images, width, height):
        processed_images = {}
        for key, art in images.items():
            name_dic = {}
            for name in art:
                lines = art[name].split('\n')
                processed_image = []

                for line in lines:
                    if len(line) < width:
                        padding = (width - len(line)) // 2
                        line = ' ' * padding + line + ' ' * (width - len(line) - padding)  # 居中扩容
                    processed_image.append(list(line[:width]))  # 裁切并转换为字符列表

                if len(processed_image) < height:
                    padding = (height - len(processed_image)) // 2
                    empty_line = [' '] * width
                    processed_image = [empty_line] * padding + processed_image + [empty_line] * (height - len(processed_image) - padding)  # 居中扩容
                else:
                    top_padding = (len(processed_image) - height) // 2
                    processed_image = processed_image[top_padding:top_padding + height]  # 居中裁切

                name_dic[name] = processed_image[:height]  # 裁切
            processed_images[key] = name_dic
        return processed_images
    processed_images = None
# 示例使用
    images = {
    'ninja': {
        "word": r'''
,---.   .--..-./`) ,---.   .--.     .-./`)     ____            .--.   .--. .-./`)   .---.     .---.      
|    \  |  |\ .-.')|    \  |  |     \ '_ .') .'  __ `.         |  | _/  /  \ .-.')  | ,_|     | ,_|      
|  ,  \ |  |/ `-' \|  ,  \ |  |    (_ (_) _)/   '  \  \        | (`' ) /   / `-' \,-./  )   ,-./  )      
|  |\_ \|  | `-'`"`|  |\_ \|  |      / .  \ |___|  /  |        |(_ ()_)     `-'`"`\  '_ '`) \  '_ '`)    
|  _( )_\  | .---. |  _( )_\  | ___  |-'`|     _.-`   |        | (_,_)   __ .---.  > (_)  )  > (_)  )    
| (_ o _)  | |   | | (_ o _)  ||   | |   '  .'   _    |        |  |\ \  |  ||   | (  .  .-' (  .  .-'    
|  (_,_)\  | |   | |  (_,_)\  ||   `-'  /   |  _( )_  |        |  | \ `'   /|   |  `-'`-'|___`-'`-'|___  
|  |    |  | |   | |  |    |  | \      /    \ (_ o _) /        |  |  \    / |   |   |        \|        \ 
'--'    '--' '---' '--'    '--'  `-..-'      '.(_,_).'         `--'   `'-'  '---'   `--------``--------` 
                                                                                                         
'''
    ,'head':
'''⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⡤⠶⠚⠋⠉⠉⠙⠛⠲⠦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣶⣾⡿⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠳⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡴⢿⠙⣿⣻⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠹⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣷⡟⠁⢹⠿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡾⠀⠀⠘⢷⣼⢷⣄⡀⠀⠀⢤⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣇⠀⠀⠀⠈⢻⡉⢣⠙⡶⣶⢾⣿⣿⡷⠀⠀⠀⠀⠀⠀⢀⠀⢀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⡀⣸⠆⠀⠀⠙⢆⠳⣆⠹⣿⣿⣿⣥⣄⠀⠀⠀⠀⠀⢾⡀⣸⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡼⠋⠉⠀⠀⠀⠀⠘⡄⣀⡉⠻⣟⣿⡏⠙⠃⠀⠀⠀⠀⠀⠉⠻⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠰⡇⢸⣶⣤⣀⠀⠀⠀⠹⠁⢳⡀⢈⣻⡇⠀⠀⠀⠀⢀⣠⣴⣾⠀⡷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡌⣿⡟⠻⢷⣶⢄⡀⠀⠨⢿⢻⣿⠙⠀⣀⣤⣾⠿⠛⣿⡽⣸⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡾⢫⡇⢻⣿⣄⠀⠈⠙⠿⣷⣤⣼⣆⣠⣴⡿⠛⠉⠀⠀⣴⡿⠁⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⢷⡀⠀⠀⠀⠀⠀⠀⠀⢀⣾⠁⣠⣷⣄⠙⢝⠳⠶⠶⠞⢋⡠⠛⠚⠣⣉⠛⠲⠶⠖⣛⠟⢁⣴⠇⠀⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴
⢸⣷⡄⠀⠀⠀⠀⠀⠀⢸⡇⡔⢡⡏⠹⢿⣄⣉⠁⠒⠈⠁⠀⠀⠀⠀⠀⠉⠐⠒⢉⣡⣼⣯⡶⠛⠋⢉⣩⠿⠛⠒⠂⠀⠀⠀⠀⢀⣼⡏
⠀⢿⠙⢦⡀⠀⠀⠀⠀⠘⣿⡁⡿⠀⢠⠞⢷⠈⠱⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⡰⠉⢠⠟⠁⠀⡄⣄⣸⣆⠀⠀⠀⠀⠀⠀⠀⣠⠞⣸⠁
⠀⠘⣧⠀⠙⢦⡀⠀⠀⠀⠈⠻⣿⣶⣞⠛⢻⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⡿⠀⢰⣋⣉⠉⣠⡜⠀⠀⠀⠀⢀⣠⠞⠁⢠⠏⠀
⠀⠀⠘⣧⡀⠀⠙⠷⣄⡀⠀⠀⠹⣯⡏⠙⠛⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣷⡶⢾⣇⣨⠽⠋⠀⠀⠀⣀⡴⠋⠁⠀⣰⠏⠀⠀
⠀⠀⠀⠈⠳⣄⠓⢄⠈⠛⢦⣄⠀⠘⢿⣄⡀⢹⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠞⠁⣀⣀⣸⡦⠄⠀⣀⡤⠞⠉⣀⠔⢁⡼⠃⠀⠀⠀
⠀⠀⠀⠀⠀⠈⠳⣦⡁⠢⢄⠈⠙⠶⣤⣈⠙⠻⠶⣿⣦⡀⠀⠀⠀⠀⠀⣠⣾⣥⠶⠛⠉⠁⢀⣠⡴⠚⠉⢀⠔⢊⣠⠞⠋⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠙⠳⢤⣙⠢⢄⠀⠉⠓⠦⣄⣀⠀⠙⠓⠒⠒⠒⠛⠁⠀⠀⢀⣠⡤⠞⠋⠁⡀⠄⣊⣥⠶⠋⠁⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠲⢬⣁⠂⠤⣀⠉⠛⠶⢤⣀⡀⠀⣀⣤⠶⠚⠉⢁⡠⠔⣂⣥⠶⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣈⡙⠲⢦⣍⣒⣤⣤⠼⠟⠋⢉⣀⠤⢒⣊⡥⠶⠛⣉⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⣠⠤⣤⣀⣀⣀⣀⣀⣀⣀⣀⣀⣠⡏⠉⠉⡷⠖⠚⠋⣉⡠⠤⠐⢂⣩⡴⠶⢟⣉⡉⠛⠒⢶⠇⠉⢹⣧⣀⣀⣀⣀⣀⣀⣀⣀⣀⡠⠤⢄
⡇⠀⠀⠀⠀⡏⢠⡇⡇⢰⡀⡄⢀⢷⠀⡆⢹⣂⣈⣩⡤⠶⠞⠋⠉⠉⠙⠓⠶⠤⣬⣉⣐⡺⠀⠂⣸⢱⠀⠀⡃⠈⠀⠃⠈⠀⠀⠀⠀⢸
⠙⠢⠶⠴⠦⠷⠤⠷⠛⠒⠓⠛⠛⢻⣦⣵⡼⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠧⢼⣤⡟⠛⠛⠛⠳⠿⠭⠽⠤⠴⠦⠄⠀⠚'''}}
if __name__ == "__main__":
    processed_images = ascii_art.process_images(ascii_art.images, 80, 20)
    for key, image in processed_images.items():
        print(f"Processed image for {key}:")
        for name in image:
            print(f"Name: {name}")
            for line in image[name]:
                print(''.join(line))
            print("\n")# start shi boyuan
class Direction:
    up = (0,-1, 0)
    down = (0,1, 0)
    left = (0,0, -1)
    right = (0,0, 1)
    none = (0,0,0)
    leftup = (0,-1,-1)
    rightup = (0,-1,1)
    leftdown = (0,1,-1)
    rightdown = (0,1,1)
    render_map = {
        up: '△',
        down: '▽',
        left: '◁',
        right: '▷',
        none: '|'
    }
    def Move_dispatch(move:str):
        match(move):
            case "w":
                return Direction.up
            case "a":
                return Direction.left
            case "s":
                return Direction.down
            case "d":
                return Direction.right
    def Move_dispatch2(move):
        match(move):
            case Direction.up:
                return Direction.rightup
            case Direction.down:
                return Direction.leftdown
            case Direction.right:
                return Direction.rightdown
            case Direction.left:
                return Direction.leftdown
#end
class ascii_art:
    @staticmethod
    def process_images(images, width, height):
        processed_images = {}
        for key, art in images.items():
            name_dic = {}
            for name in art:
                lines = art[name].split('\n')
                processed_image = []

                for line in lines:
                    if len(line) < width:
                        padding = (width - len(line)) // 2
                        line = ' ' * padding + line + ' ' * (width - len(line) - padding)  # 居中扩容
                    processed_image.append(list(line[:width]))  # 裁切并转换为字符列表

                if len(processed_image) < height:
                    padding = (height - len(processed_image)) // 2
                    empty_line = [' '] * width
                    processed_image = [empty_line] * padding + processed_image + [empty_line] * (height - len(processed_image) - padding)  # 居中扩容
                else:
                    top_padding = (len(processed_image) - height) // 2
                    processed_image = processed_image[top_padding:top_padding + height]  # 居中裁切

                name_dic[name] = processed_image[:height]  # 裁切
            processed_images[key] = name_dic
        return processed_images
    processed_images = None
# 示例使用
    images = {
    'ninja': {
        "word": r'''
,---.   .--..-./`) ,---.   .--.     .-./`)     ____            .--.   .--. .-./`)   .---.     .---.      
|    \  |  |\ .-.')|    \  |  |     \ '_ .') .'  __ `.         |  | _/  /  \ .-.')  | ,_|     | ,_|      
|  ,  \ |  |/ `-' \|  ,  \ |  |    (_ (_) _)/   '  \  \        | (`' ) /   / `-' \,-./  )   ,-./  )      
|  |\_ \|  | `-'`"`|  |\_ \|  |      / .  \ |___|  /  |        |(_ ()_)     `-'`"`\  '_ '`) \  '_ '`)    
|  _( )_\  | .---. |  _( )_\  | ___  |-'`|     _.-`   |        | (_,_)   __ .---.  > (_)  )  > (_)  )    
| (_ o _)  | |   | | (_ o _)  ||   | |   '  .'   _    |        |  |\ \  |  ||   | (  .  .-' (  .  .-'    
|  (_,_)\  | |   | |  (_,_)\  ||   `-'  /   |  _( )_  |        |  | \ `'   /|   |  `-'`-'|___`-'`-'|___  
|  |    |  | |   | |  |    |  | \      /    \ (_ o _) /        |  |  \    / |   |   |        \|        \ 
'--'    '--' '---' '--'    '--'  `-..-'      '.(_,_).'         `--'   `'-'  '---'   `--------``--------` 
                                                                                                         
'''
    ,'head':
'''⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⡤⠶⠚⠋⠉⠉⠙⠛⠲⠦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣶⣾⡿⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠳⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡴⢿⠙⣿⣻⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠹⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣷⡟⠁⢹⠿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡾⠀⠀⠘⢷⣼⢷⣄⡀⠀⠀⢤⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣇⠀⠀⠀⠈⢻⡉⢣⠙⡶⣶⢾⣿⣿⡷⠀⠀⠀⠀⠀⠀⢀⠀⢀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⡀⣸⠆⠀⠀⠙⢆⠳⣆⠹⣿⣿⣿⣥⣄⠀⠀⠀⠀⠀⢾⡀⣸⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡼⠋⠉⠀⠀⠀⠀⠘⡄⣀⡉⠻⣟⣿⡏⠙⠃⠀⠀⠀⠀⠀⠉⠻⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠰⡇⢸⣶⣤⣀⠀⠀⠀⠹⠁⢳⡀⢈⣻⡇⠀⠀⠀⠀⢀⣠⣴⣾⠀⡷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡌⣿⡟⠻⢷⣶⢄⡀⠀⠨⢿⢻⣿⠙⠀⣀⣤⣾⠿⠛⣿⡽⣸⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡾⢫⡇⢻⣿⣄⠀⠈⠙⠿⣷⣤⣼⣆⣠⣴⡿⠛⠉⠀⠀⣴⡿⠁⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⢷⡀⠀⠀⠀⠀⠀⠀⠀⢀⣾⠁⣠⣷⣄⠙⢝⠳⠶⠶⠞⢋⡠⠛⠚⠣⣉⠛⠲⠶⠖⣛⠟⢁⣴⠇⠀⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴
⢸⣷⡄⠀⠀⠀⠀⠀⠀⢸⡇⡔⢡⡏⠹⢿⣄⣉⠁⠒⠈⠁⠀⠀⠀⠀⠀⠉⠐⠒⢉⣡⣼⣯⡶⠛⠋⢉⣩⠿⠛⠒⠂⠀⠀⠀⠀⢀⣼⡏
⠀⢿⠙⢦⡀⠀⠀⠀⠀⠘⣿⡁⡿⠀⢠⠞⢷⠈⠱⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⡰⠉⢠⠟⠁⠀⡄⣄⣸⣆⠀⠀⠀⠀⠀⠀⠀⣠⠞⣸⠁
⠀⠘⣧⠀⠙⢦⡀⠀⠀⠀⠈⠻⣿⣶⣞⠛⢻⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⡿⠀⢰⣋⣉⠉⣠⡜⠀⠀⠀⠀⢀⣠⠞⠁⢠⠏⠀
⠀⠀⠘⣧⡀⠀⠙⠷⣄⡀⠀⠀⠹⣯⡏⠙⠛⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣷⡶⢾⣇⣨⠽⠋⠀⠀⠀⣀⡴⠋⠁⠀⣰⠏⠀⠀
⠀⠀⠀⠈⠳⣄⠓⢄⠈⠛⢦⣄⠀⠘⢿⣄⡀⢹⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠞⠁⣀⣀⣸⡦⠄⠀⣀⡤⠞⠉⣀⠔⢁⡼⠃⠀⠀⠀
⠀⠀⠀⠀⠀⠈⠳⣦⡁⠢⢄⠈⠙⠶⣤⣈⠙⠻⠶⣿⣦⡀⠀⠀⠀⠀⠀⣠⣾⣥⠶⠛⠉⠁⢀⣠⡴⠚⠉⢀⠔⢊⣠⠞⠋⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠙⠳⢤⣙⠢⢄⠀⠉⠓⠦⣄⣀⠀⠙⠓⠒⠒⠒⠛⠁⠀⠀⢀⣠⡤⠞⠋⠁⡀⠄⣊⣥⠶⠋⠁⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠲⢬⣁⠂⠤⣀⠉⠛⠶⢤⣀⡀⠀⣀⣤⠶⠚⠉⢁⡠⠔⣂⣥⠶⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣈⡙⠲⢦⣍⣒⣤⣤⠼⠟⠋⢉⣀⠤⢒⣊⡥⠶⠛⣉⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⣠⠤⣤⣀⣀⣀⣀⣀⣀⣀⣀⣀⣠⡏⠉⠉⡷⠖⠚⠋⣉⡠⠤⠐⢂⣩⡴⠶⢟⣉⡉⠛⠒⢶⠇⠉⢹⣧⣀⣀⣀⣀⣀⣀⣀⣀⣀⡠⠤⢄
⡇⠀⠀⠀⠀⡏⢠⡇⡇⢰⡀⡄⢀⢷⠀⡆⢹⣂⣈⣩⡤⠶⠞⠋⠉⠉⠙⠓⠶⠤⣬⣉⣐⡺⠀⠂⣸⢱⠀⠀⡃⠈⠀⠃⠈⠀⠀⠀⠀⢸
⠙⠢⠶⠴⠦⠷⠤⠷⠛⠒⠓⠛⠛⢻⣦⣵⡼⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠧⢼⣤⡟⠛⠛⠛⠳⠿⠭⠽⠤⠴⠦⠄⠀⠚'''}}
if __name__ == "__main__":
    processed_images = ascii_art.process_images(ascii_art.images, 80, 20)
    for key, image in processed_images.items():
        print(f"Processed image for {key}:")
        for name in image:
            print(f"Name: {name}")
            for line in image[name]:
                print(''.join(line))
            print("\n")
